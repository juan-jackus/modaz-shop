{"version":3,"sources":["views/components/orders/OrdersColumns.jsx","views/components/orders/NewOrderSidebar.jsx","views/components/orders/OderCustomHearder.jsx","views/components/orders/OrderModal.jsx","views/Orders.jsx","@core/components/sidebar/index.js","views/components/users/ToastContent.jsx","@core/components/breadcrumbs/index.js"],"names":["getColumns","oderDeleteRestoreHandler","statusOptions","showTrash","dispatch","useDispatch","history","useHistory","useState","loader","setLoader","name","width","sortable","sortField","cell","data","to","id","onClick","getOrder","_","className","uid","minWidth","customer","username","totalPrice","toFixed","toLocaleString","status","find","option","value","statusUpdateHandler","st","updateOrderStatus","Spinner","color","UncontrolledDropdown","DropdownToggle","tag","Badge","pill","label","style","marginLeft","DropdownMenu","map","i","DropdownItem","renderStatus","omit","formatDate","created_at","deleted_at","size","right","borderTop","push","NewOrderSidebar","open","toggleSidebar","orderErrors","useSelector","state","errors","addOrder","quantityRef","useRef","setErrors","isSubmitting","setIsSubmitting","selectedCustomer","setSelectedCustomer","selectedProducts","setSelectedProducts","setTotalPrice","useEffect","setFormErrors","setTimeout","type","debouncedCustomerLoadOptions","useCallback","debounce","inputText","callback","querryCustomers","debouncedProductLoadOptions","querryProducts","totalPriceHandler","operation","price","productArray","prevPrice","newTotalPrice","reduce","sum","product","quantity","current","quantityHandler","input","test","onSubmit","e","preventDefault","length","customerId","products","prod","item","moreInfos","colors","random","Math","floor","orderValues","then","res","successSubmit","toastValue","text","toast","ToastContent","transition","Slide","hideProgressBar","autoClose","pauseOnHover","title","headerClassName","contentClassName","Form","Alert","fontSize","FormText","FormGroup","Label","for","isClearable","isSearchable","cacheOptions","classNamePrefix","theme","selectThemeColors","placeholder","loadOptions","getOptionValue","getOptionLabel","onChange","isMulti","newValue","uniqBy","Row","Col","xs","sm","src","images","UncontrolledTooltip","placement","target","display","objectFit","marginBottom","defaultValue","onBlur","currentTarget","ref","Button","disabled","outline","OrderCustomHeader","totalOrder","rowsPerPage","selectedRows","setRowsPerPage","getTrashedOrders","trashBtnColor","CustomInput","padding","backgroundPosition","readOnly","selectedCount","Ripple","backgroundColor","OrderModal","processing","actionType","orderToManage","showOrderModal","setShowOrderModal","showOderModalData","actionText","Modal","isOpen","modalClassName","toggle","ModalHeader","ModalBody","ModalFooter","OrdersList","paramStatus","store","orders","params","labelFr","q","searchTerm","setSearchTerm","page","currentPage","setCurrentPage","perPage","currentStatus","setCurrentStatus","sortBy","sortByValue","setSortByValue","trash","setShowTrash","setOrderToManage","setSelectedRows","toggledClearRows","setToggleClearRows","sidebarOpen","setSidebarOpen","setActionType","setProcessing","loadingData","setLoadingData","getOrdersData","order","Array","isArray","maxHeight","overflow","o","action","single","deleteOrder","mutiple","deleteMultipleOrder","restoreOrder","restoreMultipleOrder","successAction","breadCrumbTitle","breadCrumbActive","Card","CardHeader","CardTitle","CardBody","md","Input","val","options","classnames","noHeader","pagination","subHeader","responsive","striped","highlightOnHover","paginationServer","sortServer","sortIcon","onSort","column","sortDirection","selectableRows","onSelectedRowsChange","clearSelectedRows","paginationComponent","previousLabel","nextLabel","pageCount","totalPages","activeClassName","forcePage","onPageChange","selected","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","columns","customStyles","rows","stripedStyle","subHeaderComponent","totalOrders","Sidebar","props","bodyClassName","wrapperClassName","children","closeBtn","rest","renderCloseBtn","undefined","String","close","showValueToDelete","icon","BreadCrumbs","breadCrumbParent","breadCrumbParent2","breadCrumbParent3","active"],"mappings":"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","file":"static/js/31.9c8d9709.chunk.js","sourcesContent":["// ** React Imports\r\nimport { useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n// ** Redux Store and Actions\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getOrder, updateOrderStatus } from '@src/redux/actions/orders';\r\n// import { getCustomer } from '@src/redux/actions/customers';\r\n// ** Utils\r\nimport { formatDate } from '@utils';\r\n// ** Styling Components\r\nimport {\r\n  Trash2,\r\n  Eye,\r\n  RefreshCw,\r\n  ChevronDown,\r\n  MoreVertical,\r\n} from 'react-feather';\r\nimport {\r\n  Badge,\r\n  Spinner,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  UncontrolledDropdown,\r\n} from 'reactstrap';\r\n\r\nconst renderStatus = (\r\n  data,\r\n  dispatch,\r\n  statusOptions,\r\n  showTrash,\r\n  loader,\r\n  setLoader\r\n) => {\r\n  // eslint-disable-next-line\r\n  const status = statusOptions.find((option) => option.value == data.status);\r\n  // const arrowStyle = i === 0 ? 'arrow-top' : 'arrow-bottom';\r\n  const statusUpdateHandler = async (st, data) => {\r\n    setLoader(data.id);\r\n    await dispatch(updateOrderStatus({ status: st.value }, data.id));\r\n    setLoader(false);\r\n  };\r\n\r\n  return loader === data.id ? (\r\n    <div className='w-100 d-flex justify-content-center '>\r\n      <Spinner color='primary' />\r\n    </div>\r\n  ) : (\r\n    <UncontrolledDropdown>\r\n      <DropdownToggle tag='div' className='btn btn-sm'>\r\n        <Badge className='text-capitalize' color={status?.color} pill>\r\n          {status.label}\r\n          <ChevronDown style={{ marginLeft: '5px' }} />\r\n        </Badge>\r\n      </DropdownToggle>\r\n      {!showTrash && (\r\n        <DropdownMenu className='status-dropdown '>\r\n          {statusOptions.map((st, i) => {\r\n            // eslint-disable-next-line\r\n            return st.value != data.status ? (\r\n              <DropdownItem\r\n                key={i}\r\n                className='w-100 text-capitalize'\r\n                onClick={() => statusUpdateHandler(st, data)}\r\n              >\r\n                {st.label}\r\n              </DropdownItem>\r\n            ) : null;\r\n          })}\r\n        </DropdownMenu>\r\n      )}\r\n    </UncontrolledDropdown>\r\n  );\r\n};\r\n\r\nexport const getColumns = (\r\n  oderDeleteRestoreHandler,\r\n  statusOptions,\r\n  showTrash\r\n) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  // const statusOptions = useSelector((state) => state.orders.statusOptions);\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  return [\r\n    {\r\n      name: 'Id',\r\n      width: '130px',\r\n      sortable: true,\r\n      sortField: 'id',\r\n      // sortFunction: uidSortFunction,\r\n      cell: (data) => (\r\n        <Link\r\n          to={`/orders/view/${data.id}`}\r\n          onClick={() => dispatch(getOrder(_, data))}\r\n        >\r\n          <span className='font-weight-bold'>{data.uid}</span>\r\n        </Link>\r\n      ),\r\n    },\r\n    {\r\n      name: 'Clients',\r\n      minWidth: '200px',\r\n      cell: (data) => <span>@{data.customer.username}</span>,\r\n    },\r\n    {\r\n      name: 'Prix total',\r\n      minWidth: '150px',\r\n      sortable: true,\r\n      sortField: 'price',\r\n      cell: (data) => `$${(+data.totalPrice.toFixed(2)).toLocaleString()}`,\r\n    },\r\n    {\r\n      name: 'Statut',\r\n      width: '150px',\r\n      cell: (data) =>\r\n        renderStatus(\r\n          data,\r\n          dispatch,\r\n          statusOptions,\r\n          showTrash,\r\n          loader,\r\n          setLoader\r\n        ),\r\n    },\r\n    {\r\n      name: 'Créée',\r\n      width: '130px',\r\n      sortable: true,\r\n      sortField: 'id',\r\n      omit: showTrash,\r\n      cell: (data) => formatDate(data.created_at, true),\r\n    },\r\n    {\r\n      name: 'Supprimée',\r\n      width: '130px',\r\n      sortable: true,\r\n      sortField: 'trash',\r\n      omit: !showTrash,\r\n      cell: (data) => formatDate(data.deleted_at, true),\r\n    },\r\n    {\r\n      name: 'Actions',\r\n      width: '130px',\r\n      cell: (data) => (\r\n        <UncontrolledDropdown>\r\n          <DropdownToggle tag='div' className='btn btn-sm'>\r\n            <MoreVertical size={14} className='cursor-pointer' />\r\n          </DropdownToggle>\r\n          <DropdownMenu right>\r\n            {showTrash ? (\r\n              <DropdownItem\r\n                className='w-100'\r\n                onClick={() => oderDeleteRestoreHandler(data, 'RESTORE')}\r\n                style={{ width: '100%', borderTop: '1px solid #e9e9e9' }}\r\n              >\r\n                <RefreshCw size={14} color='#2dc872' className='mr-50' />\r\n                <span className='align-middle '>Restaurer</span>\r\n              </DropdownItem>\r\n            ) : (\r\n              <DropdownItem\r\n                className='w-100'\r\n                onClick={() => {\r\n                  dispatch(getOrder(null, data));\r\n                  history.push(`/orders/view/${data.id}`);\r\n                }}\r\n              >\r\n                <Eye size={14} color='#2dc872' className='mr-50' />\r\n                <span className='align-middle '>Voir</span>\r\n              </DropdownItem>\r\n            )}\r\n            {/* Delete */}\r\n            <DropdownItem\r\n              className='w-100'\r\n              onClick={() => oderDeleteRestoreHandler(data)}\r\n              style={{ width: '100%', borderTop: '1px solid #e9e9e9' }}\r\n            >\r\n              <Trash2 size={14} color='#ea5455' className='mr-50' />\r\n              <span className='align-middle '>Supprimer</span>\r\n            </DropdownItem>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      ),\r\n    },\r\n  ];\r\n};\r\n","// ** React Import\r\nimport { useState, useEffect, useRef, useCallback } from 'react';\r\n// ** Store & Actions\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  addOrder,\r\n  querryCustomers,\r\n  querryProducts,\r\n} from '@src/redux/actions/orders';\r\n// ** Utils\r\nimport _ from 'lodash';\r\nimport { selectThemeColors } from '@utils';\r\n// ** Third Party Components\r\nimport AsyncSelect from 'react-select/async';\r\nimport { toast, Slide } from 'react-toastify';\r\n// ** Custom Components\r\nimport Sidebar from '@components/sidebar';\r\nimport ToastContent from '../users/ToastContent.jsx';\r\n// ** Styling Components\r\nimport { AlertCircle, ChevronDown, ChevronUp } from 'react-feather';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Alert,\r\n  Label,\r\n  Button,\r\n  Spinner,\r\n  FormText,\r\n  FormGroup,\r\n  UncontrolledTooltip,\r\n} from 'reactstrap';\r\n\r\nconst NewOrderSidebar = ({ open, toggleSidebar }) => {\r\n  // ** Store Vars\r\n  const dispatch = useDispatch();\r\n  const orderErrors = useSelector((state) => state.errors.addOrder);\r\n  // ** States\r\n  const quantityRef = useRef({});\r\n  const [errors, setErrors] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [selectedCustomer, setSelectedCustomer] = useState('');\r\n  const [selectedProducts, setSelectedProducts] = useState([]);\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n\r\n  // ** Set server Errors response\r\n  useEffect(() => {\r\n    if (orderErrors) {\r\n      setFormErrors('Erreur de serveur ! Veuillez réessayer');\r\n      setTimeout(() => {\r\n        setFormErrors(null);\r\n      }, 3000);\r\n      dispatch({\r\n        type: 'CLEAR_ERRORS',\r\n        data: 'addOrder',\r\n      });\r\n    }\r\n  }, [orderErrors]);\r\n\r\n  // ** Debounce Customer Input Search\r\n  const debouncedCustomerLoadOptions = useCallback(\r\n    _.debounce((inputText, callback) => {\r\n      querryCustomers(inputText, callback);\r\n    }, 500),\r\n    []\r\n  );\r\n\r\n  // ** Debounce Customer Input Search\r\n  const debouncedProductLoadOptions = useCallback(\r\n    _.debounce((inputText, callback) => {\r\n      querryProducts(inputText, callback);\r\n    }, 500),\r\n    []\r\n  );\r\n\r\n  const totalPriceHandler = (operation, price, productArray) => {\r\n    switch (operation) {\r\n      case 'inc':\r\n        setTotalPrice((prevPrice) => prevPrice + price);\r\n        break;\r\n      case 'dec':\r\n        setTotalPrice((prevPrice) => prevPrice - price);\r\n        break;\r\n      default:\r\n        if (operation !== 'stop') {\r\n          const items = productArray || selectedProducts;\r\n          const newTotalPrice = items.reduce((sum, product) => {\r\n            const quantity = quantityRef.current[product.id]?.value || 1;\r\n            return sum + product.price * quantity;\r\n          }, 0);\r\n          setTotalPrice(newTotalPrice);\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  // ** handle Customer selection\r\n  const quantityHandler = (id, value, price) => {\r\n    const input = quantityRef.current[id];\r\n    const numberRegex = /^[1-9][0-9]*$/;\r\n    switch (value) {\r\n      case 'inc':\r\n        input.value++;\r\n        break;\r\n      case 'dec':\r\n        if (input.value > 1) {\r\n          input.value--;\r\n        } else value = 'stop';\r\n        break;\r\n      default:\r\n        if (numberRegex.test(value)) {\r\n          input.value = value;\r\n        } else input.value = 1;\r\n        value = null;\r\n        break;\r\n    }\r\n    totalPriceHandler(value, price);\r\n  };\r\n\r\n  // ** Function to handle form submit\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!selectedCustomer || !selectedProducts.length) {\r\n      setErrors('Les champs \"Client\" et \"Produits\" sont obligatoires.');\r\n      setTimeout(() => {\r\n        setErrors(false);\r\n      }, 3000);\r\n      return;\r\n    }\r\n    setIsSubmitting(true);\r\n    const customerId = selectedCustomer.id;\r\n    const products = selectedProducts.map((prod) => {\r\n      const quantity = quantityRef.current[prod.id].value;\r\n      const item = { id: prod.id, quantity };\r\n      // Pick a Random Color(test)\r\n      if (prod?.moreInfos?.colors && prod?.moreInfos?.colors.length) {\r\n        const random = Math.floor(Math.random() * prod.moreInfos.colors.length);\r\n        item.color = prod.moreInfos.colors[random];\r\n      }\r\n      return item;\r\n    });\r\n\r\n    const orderValues = { customerId, products };\r\n\r\n    // return console.log(orderValues);\r\n    const successSubmit = await dispatch(addOrder(orderValues)).then((res) => {\r\n      setIsSubmitting(false);\r\n      return res;\r\n    });\r\n\r\n    let toastValue = {\r\n      type: 'error',\r\n      text: 'Échec de la commande',\r\n    };\r\n\r\n    if (successSubmit) {\r\n      setSelectedCustomer('');\r\n      setSelectedProducts([]);\r\n      toastValue = {\r\n        type: 'success',\r\n        text: 'Commande réussie',\r\n      };\r\n    }\r\n\r\n    toast[toastValue.type](ToastContent(toastValue), {\r\n      transition: Slide,\r\n      hideProgressBar: false,\r\n      autoClose: 3000,\r\n      pauseOnHover: true,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Sidebar\r\n      size='lg'\r\n      open={open}\r\n      id='order-sidebar'\r\n      title='Ajouter une commande'\r\n      headerClassName='mb-1'\r\n      contentClassName='pt-0'\r\n      toggleSidebar={toggleSidebar}\r\n    >\r\n      <Form onSubmit={onSubmit}>\r\n        {/* Required Field Text */}\r\n        {errors ? (\r\n          <Alert color='danger'>\r\n            <div className='alert-body'>\r\n              <AlertCircle size={15} />{' '}\r\n              <span className='ml-1' style={{ fontSize: '13px' }}>\r\n                {errors}\r\n              </span>\r\n            </div>\r\n          </Alert>\r\n        ) : (\r\n          <FormText className='d-flex mb-1' color='muted'>\r\n            <div className='ml-auto'>\r\n              [<span className='text-danger'> * </span>] Champs obligatoires\r\n            </div>\r\n          </FormText>\r\n        )}\r\n\r\n        {/* Customer */}\r\n        <FormGroup>\r\n          <Label for='order-customer'>\r\n            Client <span className='text-danger'>*</span>\r\n          </Label>\r\n          <AsyncSelect\r\n            isClearable\r\n            isSearchable\r\n            cacheOptions\r\n            classNamePrefix='select'\r\n            theme={selectThemeColors}\r\n            value={selectedCustomer}\r\n            placeholder=\"Entrez le nom d'utilisateur du client...\"\r\n            loadOptions={debouncedCustomerLoadOptions}\r\n            getOptionValue={(customer) => customer.id}\r\n            getOptionLabel={(customer) => customer.username}\r\n            onChange={(value) => setSelectedCustomer(value)}\r\n          />\r\n        </FormGroup>\r\n        {/* Products */}\r\n        <FormGroup>\r\n          <Label for='products'>\r\n            Produits <span className='text-danger'>*</span>\r\n          </Label>\r\n          <AsyncSelect\r\n            isMulti\r\n            isClearable\r\n            isSearchable\r\n            cacheOptions\r\n            classNamePrefix='select'\r\n            theme={selectThemeColors}\r\n            value={selectedProducts}\r\n            placeholder='Saisir le nom du produit...'\r\n            loadOptions={debouncedProductLoadOptions}\r\n            getOptionValue={(product) => product}\r\n            getOptionLabel={(product) => product.name}\r\n            onChange={(value) => {\r\n              setSelectedProducts(() => {\r\n                const newValue = _.uniqBy(value, 'id');\r\n                totalPriceHandler(null, null, newValue);\r\n                return newValue;\r\n              });\r\n            }}\r\n          />\r\n        </FormGroup>\r\n        {/* Quantity Select */}\r\n        {selectedProducts.length ? (\r\n          <FormGroup>\r\n            <Label className='mb-1'>Sélectionnez la quantité</Label>\r\n            <Row>\r\n              {selectedProducts.map((product, i) => (\r\n                <Col\r\n                  xs='6'\r\n                  sm='4'\r\n                  key={`${i}-${product.id}`}\r\n                  className='product-quantity-wrapper mb-1'\r\n                >\r\n                  <img id={`product-img${i}`} src={product.images[0]} />\r\n                  <UncontrolledTooltip\r\n                    placement='top'\r\n                    target={`product-img${i}`}\r\n                  >\r\n                    <img\r\n                      src={product.images[0]}\r\n                      style={{\r\n                        width: '200px',\r\n                        display: 'block',\r\n                        objectFit: 'contain',\r\n                        marginBottom: '10px',\r\n                      }}\r\n                    />\r\n                    {product.name}\r\n                    <div>Prix : {`$${product.price}`}</div>\r\n                  </UncontrolledTooltip>\r\n                  <input\r\n                    type='number'\r\n                    defaultValue='1'\r\n                    name={product.id}\r\n                    onBlur={(e) =>\r\n                      quantityHandler(\r\n                        product.id,\r\n                        e.currentTarget.value,\r\n                        product.price\r\n                      )\r\n                    }\r\n                    ref={(input) => (quantityRef.current[product.id] = input)}\r\n                  />\r\n                  <div className='inc-btn-wrapper '>\r\n                    <ChevronUp\r\n                      width='13px'\r\n                      className=' svg svg1'\r\n                      onClick={() =>\r\n                        quantityHandler(product.id, 'inc', product.price)\r\n                      }\r\n                    />\r\n                    <ChevronDown\r\n                      width='13px'\r\n                      className='svg'\r\n                      onClick={() =>\r\n                        quantityHandler(product.id, 'dec', product.price)\r\n                      }\r\n                    />\r\n                  </div>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n            <div className='total-price'>\r\n              Prix total :\r\n              <span>{`$${(+totalPrice.toFixed(2)).toLocaleString()}`}</span>\r\n            </div>\r\n          </FormGroup>\r\n        ) : null}\r\n        {/* Buttons */}\r\n        <Button\r\n          type='submit'\r\n          disabled={isSubmitting || !!errors}\r\n          className='mr-1'\r\n          color='primary'\r\n        >\r\n          {isSubmitting ? (\r\n            <>\r\n              <Spinner size='sm' color='white' />\r\n              <span className='ml-50'>Soumission...</span>\r\n            </>\r\n          ) : (\r\n            'Commander'\r\n          )}\r\n        </Button>\r\n        <Button type='button' color='secondary' outline onClick={toggleSidebar}>\r\n          Annuler\r\n        </Button>\r\n      </Form>\r\n    </Sidebar>\r\n  );\r\n};\r\n\r\nexport default NewOrderSidebar;\r\n","// ** Styling Components\r\nimport { Trash2 } from 'react-feather';\r\nimport { Label, Button, CustomInput } from 'reactstrap';\r\n\r\n// ** Table Custom Header\r\nconst OrderCustomHeader = ({\r\n  totalOrder,\r\n  showTrash,\r\n  rowsPerPage,\r\n  selectedRows,\r\n  toggleSidebar,\r\n  setRowsPerPage,\r\n  getTrashedOrders,\r\n  oderDeleteRestoreHandler,\r\n}) => {\r\n  const trashBtnColor = showTrash ? '#fbdddd' : 'inherit';\r\n  return (\r\n    <div className='invoice-list-table-header w-100 mr-1 ml-50 mt-2 mb-75'>\r\n      <div className='d-flex align-items-center my-1'>\r\n        <Label for='rows-per-page'>Afficher</Label>\r\n        <CustomInput\r\n          className='form-control mx-50'\r\n          type='select'\r\n          id='rows-per-page'\r\n          value={rowsPerPage}\r\n          onChange={(e) => setRowsPerPage(e.currentTarget.value)}\r\n          style={{\r\n            width: '5rem',\r\n            padding: '0 0.8rem',\r\n            backgroundPosition:\r\n              'calc(100% - 3px) 11px, calc(100% - 20px) 13px, 100% 0',\r\n          }}\r\n        >\r\n          <option value='10'>10</option>\r\n          <option value='25'>25</option>\r\n          <option value='50'>50</option>\r\n        </CustomInput>\r\n        <Label for='rows-per-page' className='mr-1'>\r\n          Entrés sur\r\n        </Label>\r\n        <CustomInput\r\n          className='form-control text-center mr-3'\r\n          type='text'\r\n          id='rows-per-page'\r\n          value={totalOrder}\r\n          readOnly\r\n          style={{ width: '3rem', padding: '0.5rem' }}\r\n        />\r\n        {selectedRows?.selectedCount > 0 ? (\r\n          <>\r\n            {/* Delete Button */}\r\n            <Button.Ripple\r\n              color='danger'\r\n              className='mr-1'\r\n              onClick={() => oderDeleteRestoreHandler(selectedRows)}\r\n            >\r\n              Supprimer\r\n            </Button.Ripple>\r\n            {/* Restore Button */}\r\n            {showTrash && (\r\n              <Button.Ripple\r\n                color='warning'\r\n                onClick={() =>\r\n                  oderDeleteRestoreHandler(selectedRows, 'RESTORE')\r\n                }\r\n              >\r\n                Restaurer\r\n              </Button.Ripple>\r\n            )}\r\n          </>\r\n        ) : (\r\n          // Add Button\r\n          !showTrash && (\r\n            <div className='text-nowrap mr-1'>\r\n              <Button.Ripple color='primary' onClick={() => toggleSidebar()}>\r\n                Ajouter une commande\r\n              </Button.Ripple>\r\n            </div>\r\n          )\r\n        )}\r\n        <div className='ml-auto text-nowrap'>\r\n          <Button.Ripple\r\n            color='danger'\r\n            outline\r\n            style={{ backgroundColor: trashBtnColor }}\r\n            onClick={() => getTrashedOrders()}\r\n          >\r\n            <Trash2 className='mr-50' size={15} />\r\n            Corbeille\r\n          </Button.Ripple>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderCustomHeader;\r\n","// ** Styling Components\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Spinner,\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalFooter,\r\n} from 'reactstrap';\r\n\r\nconst OrderModal = ({\r\n  processing,\r\n  actionType,\r\n  orderToManage,\r\n  showOrderModal,\r\n  setShowOrderModal,\r\n  showOderModalData,\r\n  oderDeleteRestoreHandler,\r\n}) => {\r\n  const actionText = actionType === 'RESTORE' ? 'restauration' : 'suppression';\r\n  const style = actionType === 'RESTORE' ? 'warning' : 'danger';\r\n  return (\r\n    <Modal\r\n      isOpen={showOrderModal}\r\n      modalClassName={`modal-${style}`}\r\n      toggle={() => setShowOrderModal(!showOrderModal)}\r\n    >\r\n      <ModalHeader\r\n        toggle={() => setShowOrderModal(!showOrderModal)}\r\n      ></ModalHeader>\r\n      <ModalBody>\r\n        <p className={`text-${style} font-weight-bold`}>\r\n          Confirmer la {actionText} des commandes :\r\n        </p>\r\n        {showOderModalData(orderToManage?.selectedRows || orderToManage)}\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button\r\n          color={style}\r\n          disabled={processing}\r\n          onClick={() =>\r\n            oderDeleteRestoreHandler(orderToManage, actionType, true)\r\n          }\r\n        >\r\n          {processing ? (\r\n            <>\r\n              <Spinner size='sm' color='white' />\r\n              <span className='ml-50'>Traitement...</span>\r\n            </>\r\n          ) : (\r\n            'Confirmer'\r\n          )}\r\n        </Button>\r\n        <Button\r\n          color='secondary'\r\n          disabled={processing}\r\n          onClick={() => setShowOrderModal(!showOrderModal)}\r\n        >\r\n          Annuler\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default OrderModal;\r\n","// ** React\r\nimport { Fragment, useState, useEffect } from 'react';\r\n// ** Redux Store and Actions\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  deleteOrder,\r\n  restoreOrder,\r\n  getOrdersData,\r\n  deleteMultipleOrder,\r\n  restoreMultipleOrder,\r\n} from '@src/redux/actions/orders';\r\n// ** Third Party Components\r\nimport classnames from 'classnames';\r\nimport DataTable from 'react-data-table-component';\r\nimport '@styles/react/libs/tables/react-dataTable-component.scss';\r\nimport Select from 'react-select';\r\nimport '@styles/react/libs/react-select/_react-select.scss';\r\nimport { toast, Slide } from 'react-toastify';\r\nimport ReactPaginate from 'react-paginate';\r\n// ** Utils\r\nimport { selectThemeColors } from '@utils';\r\n// ** Custom Components\r\nimport { getColumns } from './components/orders/OrdersColumns.jsx';\r\nimport Sidebar from './components/orders/NewOrderSidebar.jsx';\r\nimport ToastContent from './components/users/ToastContent.jsx';\r\nimport OrderCustomHeader from './components/orders/OderCustomHearder';\r\nimport Breadcrumbs from '@components/breadcrumbs';\r\nimport OrderModal from './components/orders/OrderModal';\r\n// ** Styling Components\r\nimport { ChevronDown } from 'react-feather';\r\nimport {\r\n  Col,\r\n  Row,\r\n  Card,\r\n  Label,\r\n  Input,\r\n  Spinner,\r\n  CardBody,\r\n  CardTitle,\r\n  CardHeader,\r\n} from 'reactstrap';\r\n\r\nconst OrdersList = () => {\r\n  // ** Vars\r\n  const dispatch = useDispatch();\r\n  const store = useSelector((state) => state.orders);\r\n  const { params } = store;\r\n  let paramStatus;\r\n  const statusOptions = store.statusOptions.map((status) => {\r\n    if (status.value === params.status) {\r\n      paramStatus = status;\r\n    }\r\n    return { ...status, label: status.labelFr };\r\n  });\r\n\r\n  // console.log(store.statusOptions);\r\n  // const paramStatus = statusOptions.find(\r\n  //   (status) => status.value === params.status\r\n  // );\r\n  // ** States\r\n  const [searchTerm, setSearchTerm] = useState(params.q || ''),\r\n    [currentPage, setCurrentPage] = useState(params.page || 1),\r\n    [rowsPerPage, setRowsPerPage] = useState(params.perPage || 10),\r\n    [currentStatus, setCurrentStatus] = useState(paramStatus || null),\r\n    [sortByValue, setSortByValue] = useState(params.sortBy || null),\r\n    [showTrash, setShowTrash] = useState(params.trash || false),\r\n    [orderToManage, setOrderToManage] = useState(null),\r\n    [selectedRows, setSelectedRows] = useState(null),\r\n    [toggledClearRows, setToggleClearRows] = useState(false),\r\n    [sidebarOpen, setSidebarOpen] = useState(false),\r\n    [showOrderModal, setShowOrderModal] = useState(false),\r\n    [actionType, setActionType] = useState(null),\r\n    [processing, setProcessing] = useState(false),\r\n    [loadingData, setLoadingData] = useState(false);\r\n\r\n  // ** Get All Customer On Mount\r\n  useEffect(async () => {\r\n    setLoadingData(true);\r\n    await dispatch(\r\n      getOrdersData({\r\n        q: searchTerm,\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        status: currentStatus?.value || '',\r\n        trash: showTrash,\r\n        sortBy: sortByValue,\r\n      })\r\n    );\r\n    setLoadingData(false);\r\n  }, [\r\n    searchTerm,\r\n    currentPage,\r\n    rowsPerPage,\r\n    currentStatus,\r\n    showTrash,\r\n    sortByValue,\r\n  ]);\r\n  // ** Search Orders\r\n  const handleSearch = (e) => {\r\n    const val = e.target.value;\r\n    setSearchTerm(val);\r\n    setCurrentPage(1);\r\n  };\r\n  // ** Trashed Orders\r\n  const getTrashedOrders = () => {\r\n    const trash = !showTrash;\r\n    const sortBy = trash ? 'trash_desc' : 'newest';\r\n    setShowTrash(trash);\r\n    setSortByValue(sortBy);\r\n    setCurrentPage(1);\r\n    setSelectedRows(null);\r\n    setToggleClearRows(!toggledClearRows);\r\n  };\r\n  // Show Order(s) to delete in deletion Modal\r\n  const showOderModalData = (order) => {\r\n    if (Array.isArray(order)) {\r\n      return (\r\n        <ul style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n          {order.map((o, i) => (\r\n            <li key={i}>{o.uid}</li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul>\r\n          <li>{order.uid}</li>\r\n        </ul>\r\n      );\r\n    }\r\n  };\r\n  // ** Orders Deletion/Restore Handler\r\n  const oderDeleteRestoreHandler = async (\r\n    order,\r\n    actionType = 'DELETE',\r\n    confirmDeletion\r\n  ) => {\r\n    if (!confirmDeletion) {\r\n      setOrderToManage(order);\r\n      setActionType(actionType);\r\n      setShowOrderModal(!showOrderModal);\r\n      return;\r\n    }\r\n    // If deletion Confirmed\r\n    setProcessing(true);\r\n    let toastValue;\r\n    const action = {\r\n      single: deleteOrder,\r\n      mutiple: deleteMultipleOrder,\r\n      text: 'suppression',\r\n    };\r\n    // eslint-disable-next-line\r\n    if (actionType == 'RESTORE') {\r\n      action.single = restoreOrder;\r\n      action.mutiple = restoreMultipleOrder;\r\n      action.text = 'restauration';\r\n    }\r\n    // If there is many orders to delete/restore\r\n    if (order.selectedCount) {\r\n      const successAction = await dispatch(\r\n        action.mutiple(order.selectedRows, showTrash)\r\n      ).then((res) => res);\r\n      // Check if deletion/restoration are successfull\r\n      toastValue =\r\n        successAction === order.selectedCount\r\n          ? {\r\n              type: 'success',\r\n              text: `${action.text} reussie de :`,\r\n              value: order.selectedRows,\r\n            }\r\n          : {\r\n              type: 'error',\r\n              text: `Echec de la ${action.text} de :`,\r\n              value: `${order.selectedCount - successAction} commande(s)`,\r\n            };\r\n    } else {\r\n      // One Order to Delete\r\n      const successAction = await dispatch(\r\n        action.single(order, showTrash)\r\n      ).then((res) => res);\r\n      toastValue = successAction\r\n        ? {\r\n            type: 'success',\r\n            text: `${action.text} reussie de:`,\r\n            value: order,\r\n          }\r\n        : {\r\n            type: 'error',\r\n            text: `Echec de la ${action.text} de :`,\r\n            value: order,\r\n          };\r\n    }\r\n    setProcessing(false);\r\n    setShowOrderModal(!showOrderModal);\r\n    if (toastValue.type === 'success') {\r\n      setSelectedRows(null);\r\n      setOrderToManage(null);\r\n    }\r\n    setToggleClearRows(!toggledClearRows);\r\n    toast[toastValue.type](ToastContent(toastValue, showOderModalData), {\r\n      transition: Slide,\r\n      hideProgressBar: true,\r\n      autoClose: 5000,\r\n      pauseOnHover: true,\r\n    });\r\n  };\r\n  // ** Handle Table Sort\r\n  const handleSort = (column, sortDirection) => {\r\n    const sortBy = `${column.sortField}_${sortDirection}`;\r\n    setSortByValue(sortBy);\r\n  };\r\n  // ** Mutiple Orders selection handler\r\n  const handleSelectedRowsChange = (selectedRows) => {\r\n    setSelectedRows(selectedRows);\r\n  };\r\n  // ** Custom Pagination\r\n  const oderCustomPagination = () => {\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={''}\r\n        nextLabel={''}\r\n        pageCount={store.totalPages || 1}\r\n        activeClassName='active'\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={(page) => setCurrentPage(page.selected + 1)}\r\n        pageClassName={'page-item'}\r\n        nextLinkClassName={'page-link'}\r\n        nextClassName={'page-item next'}\r\n        previousClassName={'page-item prev'}\r\n        previousLinkClassName={'page-link'}\r\n        pageLinkClassName={'page-link'}\r\n        containerClassName={\r\n          'pagination react-paginate justify-content-end my-2 pr-1'\r\n        }\r\n      />\r\n    );\r\n  };\r\n  // ** Sidebar Toogler\r\n  const toggleSidebar = () => setSidebarOpen(!sidebarOpen);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs\r\n        breadCrumbTitle='Liste des Commandes '\r\n        breadCrumbActive='commandes'\r\n      />\r\n      <Card className='container'>\r\n        <CardHeader>\r\n          <CardTitle tag='h4'>Filtre de recherche</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            {/* Search Input */}\r\n            <Col md='4'>\r\n              <div className='d-flex align-items-center mb-sm-0 mb-1 mr-1'>\r\n                <Label className='mb-0' for='search-invoice'>\r\n                  Recherche:\r\n                </Label>\r\n                <Input\r\n                  type='text'\r\n                  id='search-invoice'\r\n                  className='ml-50 w-100'\r\n                  defaultValue={params.q}\r\n                  onChange={_.debounce(handleSearch, 300)}\r\n                />\r\n              </div>\r\n            </Col>\r\n            {/* Select Status */}\r\n            <Col className='my-md-0 my-1' md='4'>\r\n              <div className='d-flex align-items-center w-100'>\r\n                <Label className='mr-1' for='search-status'>\r\n                  Statut:\r\n                </Label>\r\n                <Select\r\n                  id='search-status'\r\n                  isClearable={true}\r\n                  theme={selectThemeColors}\r\n                  className='react-select w-100'\r\n                  classNamePrefix='select'\r\n                  placeholder=''\r\n                  options={statusOptions}\r\n                  value={currentStatus}\r\n                  onChange={(data) => {\r\n                    setCurrentStatus(data);\r\n                    setCurrentPage(1);\r\n                  }}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n      {/* Loarder */}\r\n      {loadingData && (\r\n        <div className=' p-3 d-flex justify-content-center '>\r\n          <Spinner id='datable-loader' />\r\n        </div>\r\n      )}\r\n      {/* Orders Table */}\r\n      <Card\r\n        id='orders-table'\r\n        className={classnames('container px-0', { 'd-none': loadingData })}\r\n      >\r\n        <DataTable\r\n          noHeader\r\n          pagination\r\n          subHeader\r\n          responsive\r\n          striped={true}\r\n          highlightOnHover\r\n          paginationServer\r\n          className='react-dataTable'\r\n          sortServer\r\n          sortIcon={<ChevronDown />}\r\n          onSort={handleSort}\r\n          selectableRows\r\n          onSelectedRowsChange={handleSelectedRowsChange}\r\n          clearSelectedRows={toggledClearRows}\r\n          paginationComponent={oderCustomPagination}\r\n          data={store.data}\r\n          columns={getColumns(\r\n            oderDeleteRestoreHandler,\r\n            statusOptions,\r\n            showTrash\r\n          )}\r\n          customStyles={{\r\n            rows: { stripedStyle: { backgroundColor: '#f7f7f7' } },\r\n          }}\r\n          subHeaderComponent={\r\n            <OrderCustomHeader\r\n              showTrash={showTrash}\r\n              rowsPerPage={rowsPerPage}\r\n              selectedRows={selectedRows}\r\n              toggleSidebar={toggleSidebar}\r\n              totalOrder={store.totalOrders}\r\n              setRowsPerPage={setRowsPerPage}\r\n              getTrashedOrders={getTrashedOrders}\r\n              oderDeleteRestoreHandler={oderDeleteRestoreHandler}\r\n            />\r\n          }\r\n        />\r\n      </Card>\r\n      {showOrderModal && (\r\n        <OrderModal\r\n          processing={processing}\r\n          actionType={actionType}\r\n          orderToManage={orderToManage}\r\n          showOrderModal={showOrderModal}\r\n          setShowOrderModal={setShowOrderModal}\r\n          showOderModalData={showOderModalData}\r\n          oderDeleteRestoreHandler={oderDeleteRestoreHandler}\r\n        />\r\n      )}\r\n      {sidebarOpen && (\r\n        <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} />\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default OrdersList;\r\n","// ** Third Party Components\r\nimport { X } from 'react-feather'\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap'\r\n\r\nconst Sidebar = props => {\r\n  // ** Props\r\n  const {\r\n    width,\r\n    open,\r\n    toggleSidebar,\r\n    size,\r\n    bodyClassName,\r\n    contentClassName,\r\n    wrapperClassName,\r\n    headerClassName,\r\n    className,\r\n    title,\r\n    children,\r\n    closeBtn,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** If user passes custom close btn render that else default close btn\r\n  const renderCloseBtn = closeBtn ? closeBtn : <X className='cursor-pointer' size={15} onClick={toggleSidebar} />\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={open}\r\n      toggle={toggleSidebar}\r\n      contentClassName={classnames({\r\n        [contentClassName]: contentClassName\r\n      })}\r\n      modalClassName={classnames('modal-slide-in', {\r\n        [wrapperClassName]: wrapperClassName\r\n      })}\r\n      className={classnames({\r\n        [className]: className,\r\n        'sidebar-lg': size === 'lg',\r\n        'sidebar-sm': size === 'sm'\r\n      })}\r\n      /*eslint-disable */\r\n      {...(width !== undefined\r\n        ? {\r\n            style: { width: String(width) + 'px' }\r\n          }\r\n        : {})}\r\n      /*eslint-enable */\r\n      {...rest}\r\n    >\r\n      <ModalHeader\r\n        className={classnames({\r\n          [headerClassName]: headerClassName\r\n        })}\r\n        toggle={toggleSidebar}\r\n        close={renderCloseBtn}\r\n        tag='div'\r\n      >\r\n        <h5 className='modal-title'>\r\n          <span className='align-middle'>{title}</span>\r\n        </h5>\r\n      </ModalHeader>\r\n      <ModalBody\r\n        className={classnames('flex-grow-1', {\r\n          [bodyClassName]: bodyClassName\r\n        })}\r\n      >\r\n        {children}\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n\r\n// ** PropTypes\r\nSidebar.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  open: Proptypes.bool.isRequired,\r\n  toggleSidebar: Proptypes.func.isRequired,\r\n  size: Proptypes.oneOf(['sm', 'lg']),\r\n  className: Proptypes.string,\r\n  bodyClassName: Proptypes.string,\r\n  contentClassName: Proptypes.string,\r\n  wrapperClassName: Proptypes.string,\r\n  children: Proptypes.any.isRequired,\r\n  width: Proptypes.oneOfType([Proptypes.number, Proptypes.string])\r\n}\r\n","// ** React\r\nimport { Fragment } from 'react';\r\n// ** Third Party Components\r\nimport Avatar from '@components/avatar';\r\n// ** Styling Components\r\nimport { Check, AlertCircle } from 'react-feather';\r\n\r\n// ** Toast Message Handler\r\nconst ToastContent = (toast, showValueToDelete) => {\r\n  let color;\r\n  switch (toast.type) {\r\n    case 'success':\r\n      color = 'success';\r\n      break;\r\n    case 'error':\r\n      color = 'danger';\r\n      break;\r\n    case 'danger':\r\n      color = 'danger';\r\n      break;\r\n    default:\r\n      color = 'warning';\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='toastify-header'>\r\n        <div className='title-wrapper'>\r\n          <Avatar\r\n            size='sm'\r\n            color={color}\r\n            icon={\r\n              toast.type === 'success' ? (\r\n                <Check size={12} />\r\n              ) : (\r\n                <AlertCircle size={12} />\r\n              )\r\n            }\r\n          />\r\n          <div style={{ maxHeight: '350px', overflow: 'auto' }}>\r\n            <h6 className='toast-title font-weight-bold text-center'>\r\n              {toast.text}\r\n            </h6>\r\n            {showValueToDelete && toast.value && showValueToDelete(toast.value)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ToastContent;\r\n","// ** React Imports\r\nimport { Link } from 'react-router-dom';\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types';\r\nimport {\r\n  Grid,\r\n  CheckSquare,\r\n  MessageSquare,\r\n  Mail,\r\n  Calendar,\r\n} from 'react-feather';\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from 'reactstrap';\r\n\r\nconst BreadCrumbs = (props) => {\r\n  // ** Props\r\n  const {\r\n    breadCrumbTitle,\r\n    breadCrumbParent,\r\n    breadCrumbParent2,\r\n    breadCrumbParent3,\r\n    breadCrumbActive,\r\n  } = props;\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? (\r\n              <h2 className='content-header-title float-left mb-0'>\r\n                {breadCrumbTitle}\r\n              </h2>\r\n            ) : (\r\n              ''\r\n            )}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Acceuil</Link>\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent && (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent}\r\n                  </BreadcrumbItem>\r\n                )}\r\n                {breadCrumbParent2 && (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                )}\r\n                {breadCrumbParent3 && (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\r\n        <div className='form-group breadcrum-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle\r\n              color='primary'\r\n              size='sm'\r\n              className='btn-icon btn-round dropdown-toggle'\r\n            >\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' right>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <CheckSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='mr-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='mr-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\nexport default BreadCrumbs;\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired,\r\n};\r\n"],"sourceRoot":""}