{"version":3,"sources":["views/components/blog/BlogHeader.jsx","views/components/blog/BlogPostList.jsx","views/components/blog/BlogFilterSidebar.jsx","views/components/blog/blogEdit/BlogModal.jsx","views/components/blog/BlogPagination.jsx","views/Blog.jsx","views/components/users/RenderAvatar.jsx","utility/paginationHandler.js","views/components/users/ToastContent.jsx","@core/components/breadcrumbs/index.js"],"names":["BlogHeader","props","showTrash","setPerPage","searchTerm","totalPosts","remountKey","selectedPosts","setActionType","setSearchTerm","setCurrentPage","setSidebarOpen","getTrashedPosts","setShowPostModal","trashBtnColor","className","Row","Col","sm","onClick","Label","for","CustomInput","type","id","defaultValue","onChange","e","target","value","style","width","padding","backgroundPosition","readOnly","length","Button","Ripple","color","tag","Link","to","outline","backgroundColor","size","InputGroup","Input","placeholder","_","debounce","InputGroupAddon","addonType","InputGroupText","BlogPostList","dispatch","allPosts","postCategories","setPostToManage","postSelectionHandler","getCategory","category","tagColor","label","postCat","map","post","i","Card","status","checked","some","p","currentTarget","getPost","CardImg","src","image","alt","title","height","onError","onImageError","top","CardBody","CardTitle","author","RenderAvatar","avatar","name","username","w","h","marginRight","formatDate","created_at","categories","Badge","classnames","pill","FormText","kFormatter","readCount","CardText","text","BlogFilterSidebar","setStatus","sidebarOpen","sortByValue","setCategories","setRemountKey","setSortByValue","postStatus","selectedStatus","find","st","selectedSortOption","trash_desc","trash_asc","newest","oldest","mostReaded","leastReaded","categoriesFilterHandler","categoriesArray","includes","push","filter","c","show","classNamePrefix","isClearable","options","theme","selectThemeColors2","option","UncontrolledButtonDropdown","DropdownToggle","caret","DropdownMenu","Object","keys","DropdownItem","index","IconTag","Icon","icon","defaultChecked","toString","Date","now","DeletePostModal","processing","actionType","postToManage","showPostModal","showPostModalData","postdeleteRestoreHandler","actionText","closeModalHandler","Modal","isOpen","modalClassName","toggle","ModalHeader","ModalBody","ModalFooter","disabled","Spinner","PostsPagination","totalPages","currentPage","useEffect","paginationItems","paginationHandler","handlePageChange","val","window","scrollTo","Pagination","PaginationItem","PaginationLink","href","preventDefault","truncateStart","active","numbers","number","truncateEnd","Blog","useDispatch","state","useLocation","store","useSelector","blog","posts","params","useState","q","page","perPage","sortBy","trash","setShowTrash","setSelectedPosts","setProcessing","loadingData","setLoadingData","getPostsData","maxHeight","overflow","action","single","deletePost","mutiple","deleteMultiplePost","restorePost","restoreMultiplePost","then","res","successDeletion","toastValue","toast","ToastContent","transition","Slide","autoClose","pauseOnHover","breadCrumbTitle","breadCrumbParent","breadCrumbActive","prevState","updatedSelectedPosts","BlogPagination","BlogModal","randomColor","Math","floor","random","img","imgWidth","imgHeight","content","initials","module","exports","totalPage","pageToShow","halfOfPageToShow","trunc","pagination","showValueToDelete","BreadCrumbs","breadCrumbParent2","breadCrumbParent3"],"mappings":"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","file":"static/js/30.5abf3a99.chunk.js","sourcesContent":["// ** React Imports\r\nimport { Link } from 'react-router-dom';\r\n// ** Utils\r\nimport _ from 'lodash';\r\n// ** Styling Components\r\nimport { AlignLeft, Search, Trash2 } from 'react-feather';\r\nimport {\r\n  Col,\r\n  Row,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  InputGroup,\r\n  CustomInput,\r\n  InputGroupText,\r\n  InputGroupAddon,\r\n} from 'reactstrap';\r\n\r\nconst BlogHeader = (props) => {\r\n  // ** Props\r\n  const {\r\n    showTrash,\r\n    setPerPage,\r\n    searchTerm,\r\n    totalPosts,\r\n    remountKey,\r\n    selectedPosts,\r\n    setActionType,\r\n    setSearchTerm,\r\n    setCurrentPage,\r\n    setSidebarOpen,\r\n    getTrashedPosts,\r\n    setShowPostModal,\r\n  } = props;\r\n\r\n  // ** Handele search input\r\n  const handleSearch = (e) => {\r\n    setSearchTerm(e.target.value);\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const trashBtnColor = showTrash ? '#fbdddd' : 'inherit';\r\n\r\n  return (\r\n    <div className=''>\r\n      <Row>\r\n        <Col sm='12'>\r\n          <div className='d-flex flex-wrap align-items-center mt-1'>\r\n            {/* Hamburguer Menu */}\r\n            <button\r\n              className='navbar-toggler sidebar-toggler mb-1'\r\n              onClick={() => setSidebarOpen(true)}\r\n            >\r\n              <span className='text d-block d-lg-none mr-1'>\r\n                <AlignLeft /> Filtres\r\n              </span>\r\n            </button>\r\n            <div className=' d-flex align-items-center mb-1'>\r\n              <Label for='posts-per-page'>Afficher</Label>\r\n              <CustomInput\r\n                className='form-control mx-50'\r\n                type='select'\r\n                id='posts-per-page'\r\n                defaultValue='6'\r\n                onChange={(e) => setPerPage(e.target.value)}\r\n                style={{\r\n                  width: '5rem',\r\n                  padding: '0 0.8rem',\r\n                  backgroundPosition:\r\n                    'calc(100% - 3px) 11px, calc(100% - 20px) 13px, 100% 0',\r\n                }}\r\n              >\r\n                <option value='6'>6</option>\r\n                <option value='10'>10</option>\r\n                <option value='14'>14</option>\r\n              </CustomInput>\r\n              <Label for='rows-per-page' className='mr-1'>\r\n                Entrés sur\r\n              </Label>\r\n              <CustomInput\r\n                className='form-control text-center mr-3'\r\n                type='text'\r\n                id='rows-per-page'\r\n                value={totalPosts}\r\n                readOnly\r\n                style={{ width: '3rem', padding: '0.5rem' }}\r\n              />\r\n            </div>\r\n            {/* Delete & Add Post Button */}\r\n            <div className=' text-nowrap mb-1'>\r\n              {selectedPosts.length ? (\r\n                <>\r\n                  {/* Delete Button */}\r\n                  <Button.Ripple\r\n                    color='danger'\r\n                    className='mr-1'\r\n                    onClick={() => {\r\n                      setActionType('DELETE');\r\n                      setShowPostModal(true);\r\n                    }}\r\n                  >\r\n                    Supprimer\r\n                  </Button.Ripple>\r\n                  {/* Restore Button */}\r\n                  {showTrash && (\r\n                    <Button.Ripple\r\n                      color='warning'\r\n                      onClick={() => {\r\n                        setActionType('RESTORE');\r\n                        setShowPostModal(true);\r\n                      }}\r\n                    >\r\n                      Restaurer\r\n                    </Button.Ripple>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                // Add Button\r\n                !showTrash && (\r\n                  <Button.Ripple\r\n                    className='mr-1'\r\n                    color='primary'\r\n                    tag={Link}\r\n                    to='/blog/add'\r\n                  >\r\n                    Ajouter un article\r\n                  </Button.Ripple>\r\n                )\r\n              )}\r\n            </div>\r\n            {/* Trash Button */}\r\n            <div className='ml-auto mb-1 '>\r\n              <Button.Ripple\r\n                color='danger'\r\n                outline\r\n                style={{ backgroundColor: trashBtnColor }}\r\n                onClick={() => getTrashedPosts()}\r\n              >\r\n                <Trash2 className='mr-50' size={15} />\r\n                Corbeille\r\n              </Button.Ripple>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        {/* POST SEARCH BAR */}\r\n        <Col sm='12'>\r\n          <div className='blog-searchbar mb-2'>\r\n            <InputGroup className='input-group-merge'>\r\n              <Input\r\n                key={remountKey}\r\n                className='search-post'\r\n                placeholder='Search Post'\r\n                defaultValue={searchTerm}\r\n                onChange={_.debounce(handleSearch, 300)}\r\n              />\r\n              <InputGroupAddon addonType='append'>\r\n                <InputGroupText>\r\n                  <Search className='text-muted' size={14} />\r\n                </InputGroupText>\r\n              </InputGroupAddon>\r\n            </InputGroup>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlogHeader;\r\n","// ** React\r\nimport { Link } from 'react-router-dom';\r\n// ** Redux Store and Actions\r\nimport { getPost } from '@store/actions/blog';\r\n// ** Utils\r\nimport { onImageError, kFormatter, formatDate } from '@utils';\r\n// ** Third Party Components\r\nimport classnames from 'classnames';\r\n// ** Custom Components\r\nimport RenderAvatar from '../users/RenderAvatar';\r\n// ** Styling Components\r\nimport { XCircle, Edit, RefreshCw, Eye } from 'react-feather';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Badge,\r\n  CardImg,\r\n  CardBody,\r\n  CardText,\r\n  FormText,\r\n  CardTitle,\r\n  CustomInput,\r\n} from 'reactstrap';\r\nimport '@styles/base/pages/app-ecommerce.scss';\r\n\r\nconst BlogPostList = (props) => {\r\n  const {\r\n    dispatch,\r\n    allPosts,\r\n    showTrash,\r\n    selectedPosts,\r\n    setActionType,\r\n    postCategories,\r\n    setPostToManage,\r\n    setShowPostModal,\r\n    postSelectionHandler,\r\n  } = props;\r\n\r\n  // Get Category and Tag Color\r\n  const getCategory = (category) => {\r\n    let tagColor = 'secondary';\r\n    let label = '';\r\n    for (const postCat of postCategories) {\r\n      // eslint-disable-next-line\r\n      if (postCat.value == category) {\r\n        tagColor = postCat.color;\r\n        label = postCat.label;\r\n        break;\r\n      }\r\n    }\r\n    return { tagColor, label };\r\n  };\r\n\r\n  // Render Post Categories Tags\r\n  const renderTags = (categories) => {\r\n    // console.log(categories);\r\n    return categories.map((category, i) => (\r\n      <Badge\r\n        key={i}\r\n        className={classnames('my-25', {\r\n          'mr-50': i !== categories.length - 1,\r\n        })}\r\n        color={getCategory(category).tagColor}\r\n        pill\r\n      >\r\n        {getCategory(category).label}\r\n      </Badge>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      {allPosts.map((post, i) => {\r\n        return (\r\n          <Col key={i} sm='6'>\r\n            <Card className='post-card'>\r\n              {post.status && (\r\n                <div className='ribbon'>\r\n                  <span>Publié</span>\r\n                </div>\r\n              )}\r\n              <div className='post-checkbox'>\r\n                <CustomInput\r\n                  type='checkbox'\r\n                  id={`post-checkbox${i}`}\r\n                  label=''\r\n                  checked={selectedPosts.some((p) => p.id === post.id)}\r\n                  onChange={(e) =>\r\n                    postSelectionHandler(e.currentTarget.checked, post)\r\n                  }\r\n                />\r\n              </div>\r\n              {/* Image */}\r\n              <Link\r\n                to={`/blog/view/${post.id}`}\r\n                onClick={() => dispatch(getPost(null, post))}\r\n              >\r\n                <CardImg\r\n                  className='background-spinner'\r\n                  src={post.image}\r\n                  alt={post.title}\r\n                  height='200px'\r\n                  onError={onImageError}\r\n                  top\r\n                />\r\n              </Link>\r\n              <CardBody>\r\n                {/* Title */}\r\n                <CardTitle tag='h3'>\r\n                  <Link\r\n                    className='blog-title-truncate text-body-heading'\r\n                    to={`/blog/view/${post.id}`}\r\n                    onClick={() => dispatch(getPost(null, post))}\r\n                  >\r\n                    {post.title}\r\n                  </Link>\r\n                </CardTitle>\r\n                {/* Infos */}\r\n                <div className='d-flex align-items-center'>\r\n                  {post.author && (\r\n                    <div className='d-flex align-items-center'>\r\n                      <RenderAvatar\r\n                        avatar={post.author.avatar}\r\n                        name={post.author.username}\r\n                        size={{ w: '27', h: '27' }}\r\n                        style={{ marginRight: '12px !important' }}\r\n                      />\r\n                      <small className='text-muted mr-25'>par</small>\r\n                      <small className='font-weight-bold'>\r\n                        {post.author.username}\r\n                      </small>\r\n                      <span className='text-muted ml-50 mr-25'>|</span>\r\n                    </div>\r\n                  )}\r\n                  <small className='text-muted'>\r\n                    {formatDate(post.created_at, true)}\r\n                  </small>\r\n                </div>\r\n                <div className='my-1 d-flex flex-wrap '>\r\n                  {/* Post Categories */}\r\n                  {renderTags(post.categories)}\r\n                  {/* Post Read Count */}\r\n                  <div className='ml-auto pl-50'>\r\n                    <FormText>Lu {kFormatter(post.readCount)} fois</FormText>\r\n                  </div>\r\n                </div>\r\n                <CardText className='text-truncate'>{post.text}</CardText>\r\n                <hr className='mb-0' />\r\n                <div className='d-flex align-items-center justify-content-between flex-wrap'>\r\n                  {/* Delete Post Button */}\r\n                  <div\r\n                    className='post-btn post-btn-delete'\r\n                    onClick={() => {\r\n                      dispatch(setPostToManage(post));\r\n                      setActionType('DELETE');\r\n                      setShowPostModal(true);\r\n                    }}\r\n                  >\r\n                    <XCircle className='mr-50' size={14} /> Supprimer\r\n                  </div>\r\n                  {/* Edit Post Button */}\r\n                  {!showTrash ? (\r\n                    <Link\r\n                      className='post-btn post-btn-edit'\r\n                      to={`/blog/edit/${post.id}`}\r\n                      onClick={() => dispatch(getPost(null, post))}\r\n                    >\r\n                      <Edit className='mr-50' size={14} /> Editer\r\n                    </Link>\r\n                  ) : (\r\n                    <div\r\n                      className='post-btn post-btn-edit'\r\n                      onClick={() => {\r\n                        dispatch(setPostToManage(post));\r\n                        setActionType('RESTORE');\r\n                        setShowPostModal(true);\r\n                      }}\r\n                    >\r\n                      <RefreshCw className='mr-50' size={14} /> Restaurer\r\n                    </div>\r\n                  )}\r\n                  {/* View Post Button */}\r\n                  <Link\r\n                    className='post-btn post-btn-view'\r\n                    to={`/blog/view/${post.id}`}\r\n                    onClick={() => dispatch(getPost(null, post))}\r\n                  >\r\n                    <Eye className='mr-50' size={14} /> Voir\r\n                  </Link>\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        );\r\n      })}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default BlogPostList;\r\n","// ** Utils\r\nimport { selectThemeColors2 } from '@utils';\r\n// ** Third Party Components\r\nimport Avatar from '@components/avatar';\r\nimport classnames from 'classnames';\r\nimport Select from 'react-select';\r\nimport '@styles/react/libs/react-select/_react-select.scss';\r\n// ** Styling Components\r\nimport * as Icon from 'react-feather';\r\nimport {\r\n  Card,\r\n  Button,\r\n  CardBody,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  UncontrolledButtonDropdown,\r\n} from 'reactstrap';\r\n\r\nconst BlogFilterSidebar = (props) => {\r\n  // props\r\n  const {\r\n    status,\r\n    showTrash,\r\n    setStatus,\r\n    remountKey,\r\n    categories,\r\n    sidebarOpen,\r\n    sortByValue,\r\n    setCategories,\r\n    setRemountKey,\r\n    setSortByValue,\r\n    setCurrentPage,\r\n    postCategories,\r\n  } = props;\r\n\r\n  const sortByOptions = {\r\n    newest: 'Récents',\r\n    oldest: 'Plus anciens',\r\n    mostReaded: 'Plus lus',\r\n    leastReaded: 'Moins lus',\r\n  };\r\n  const trashSortByOptions = {\r\n    trash_desc: 'Récemment supprimés',\r\n    trash_asc: 'Anciennement supprimés',\r\n  };\r\n  const postStatus = [\r\n    { value: true, label: 'Publiés' },\r\n    { value: false, label: 'Non publiés' },\r\n  ];\r\n  const selectedStatus = postStatus.find((st) => st.value === status);\r\n  const selectedSortOption = showTrash ? trashSortByOptions : sortByOptions;\r\n\r\n  // ** Categorie Select Handler\r\n  const categoriesFilterHandler = (e) => {\r\n    let categoriesArray = categories;\r\n    const value = e.currentTarget.value;\r\n    const checked = e.currentTarget.checked;\r\n    if (checked && !categoriesArray.includes(value)) {\r\n      categoriesArray.push(value);\r\n    } else {\r\n      // eslint-disable-next-line\r\n      categoriesArray = categoriesArray.filter((c) => c != value);\r\n    }\r\n    setCategories([...categoriesArray]);\r\n    setCurrentPage(1);\r\n  };\r\n  // ** Render Post Categories\r\n  const renderCategories = () => {\r\n    return postCategories.map((category, index) => {\r\n      const IconTag = Icon[category.icon];\r\n\r\n      return (\r\n        <div key={index} className='blog-category-filter'>\r\n          <label>\r\n            <input\r\n              type='checkbox'\r\n              value={category.value}\r\n              defaultChecked={categories.includes(category.value.toString())}\r\n              onChange={categoriesFilterHandler}\r\n            />\r\n            <Avatar\r\n              className='rounded mr-75'\r\n              color={category.color}\r\n              icon={<IconTag size={15} />}\r\n            />\r\n            <span>{category.label}</span>\r\n          </label>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  // ** Render Sorting dropdown Text\r\n  const renderSortByOptions = () => {\r\n    return Object.keys(selectedSortOption).map((option, i) => {\r\n      if (option === sortByValue) return null;\r\n      return (\r\n        <DropdownItem\r\n          key={i}\r\n          className='w-100'\r\n          onClick={() => setSortByValue(option)}\r\n        >\r\n          {selectedSortOption[option]}\r\n        </DropdownItem>\r\n      );\r\n    });\r\n  };\r\n  // ** Reset Filter\r\n  const resetFilterHandler = () => {\r\n    setStatus('');\r\n    setCategories([]);\r\n    setCurrentPage(1);\r\n    setSortByValue('newest');\r\n    setRemountKey(Date.now());\r\n  };\r\n\r\n  return (\r\n    <div className='sidebar-detached sidebar-left'>\r\n      <div className='sidebar'>\r\n        <div\r\n          className={classnames('sidebar-shop', {\r\n            show: sidebarOpen,\r\n          })}\r\n        >\r\n          <Card key={remountKey}>\r\n            <h5 className='text-center mt-3 mb-0'>Filtres</h5>\r\n            <CardBody>\r\n              {/* POST STATUS */}\r\n              <div className='mb-2'>\r\n                <h6 className='section-label'>STATUT</h6>\r\n                <Select\r\n                  classNamePrefix='select'\r\n                  placeholder='...'\r\n                  isClearable={true}\r\n                  options={postStatus}\r\n                  theme={selectThemeColors2}\r\n                  defaultValue={selectedStatus}\r\n                  onChange={(option) => setStatus(option?.value)}\r\n                />\r\n              </div>\r\n              {/* SORT POST */}\r\n              <div className='mb-2'>\r\n                <h6 className='section-label'>TRIER PAR</h6>\r\n                <UncontrolledButtonDropdown className=''>\r\n                  <DropdownToggle\r\n                    className='text-capitalize mr-1'\r\n                    color='secondary'\r\n                    outline\r\n                    caret\r\n                  >\r\n                    {selectedSortOption[sortByValue]}\r\n                  </DropdownToggle>\r\n                  <DropdownMenu>{renderSortByOptions()}</DropdownMenu>\r\n                </UncontrolledButtonDropdown>\r\n              </div>\r\n              {/* POST CATEGORIES */}\r\n              <div className='mb-2'>\r\n                <div className='blog-categories '>\r\n                  <h6 className='section-label'>Catégories</h6>\r\n                  <div className='mt-1'>{renderCategories()} </div>\r\n                </div>\r\n              </div>\r\n              {/* RESET BUTTON */}\r\n              <Button.Ripple\r\n                className='w-100 '\r\n                color='secondary'\r\n                onClick={resetFilterHandler}\r\n              >\r\n                Effacer les filtres\r\n              </Button.Ripple>\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlogFilterSidebar;\r\n","// ** Styling Components\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Spinner,\r\n  ModalBody,\r\n  ModalHeader,\r\n  ModalFooter,\r\n} from 'reactstrap';\r\n\r\nconst DeletePostModal = (props) => {\r\n  // ** Props\r\n  const {\r\n    dispatch,\r\n    processing,\r\n    actionType,\r\n    postToManage,\r\n    selectedPosts,\r\n    showPostModal,\r\n    setPostToManage,\r\n    setShowPostModal,\r\n    showPostModalData,\r\n    postdeleteRestoreHandler,\r\n  } = props;\r\n  const actionText = actionType === 'RESTORE' ? 'restauration' : 'suppression';\r\n  const style = actionType === 'RESTORE' ? 'warning' : 'danger';\r\n  // ** Modal Handler\r\n  const closeModalHandler = () => {\r\n    if (postToManage) {\r\n      dispatch(setPostToManage(null));\r\n    }\r\n    setShowPostModal(!showPostModal);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={showPostModal}\r\n      modalClassName={`modal-${style}`}\r\n      toggle={closeModalHandler}\r\n    >\r\n      <ModalHeader toggle={closeModalHandler}></ModalHeader>\r\n      <ModalBody>\r\n        <p className={`text-${style} font-weight-bold`}>\r\n          Confirmer la {actionText}\r\n          {!postToManage && selectedPosts.length > 1 && (\r\n            <span> de {selectedPosts.length} articles :</span>\r\n          )}\r\n        </p>\r\n        {showPostModalData()}\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button\r\n          color={style}\r\n          disabled={processing}\r\n          onClick={() => postdeleteRestoreHandler()}\r\n        >\r\n          {processing ? (\r\n            <>\r\n              <Spinner size='sm' color='white' />\r\n              <span className='ml-50'>Traitement...</span>\r\n            </>\r\n          ) : (\r\n            'Confirmer'\r\n          )}\r\n        </Button>\r\n        <Button\r\n          color='secondary'\r\n          disabled={processing}\r\n          onClick={closeModalHandler}\r\n        >\r\n          Annuler\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default DeletePostModal;\r\n","// ** React\r\nimport { useEffect } from 'react';\r\n// ** Styling Components\r\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\r\nimport paginationHandler from '@src/utility/paginationHandler';\r\nimport _ from 'lodash';\r\n\r\nconst PostsPagination = ({\r\n  allPosts,\r\n  totalPages,\r\n  currentPage,\r\n  setCurrentPage,\r\n}) => {\r\n  useEffect(() => {\r\n    if (allPosts.length <= 0) setCurrentPage(1);\r\n  }, [allPosts.length]);\r\n\r\n  const pageToShow = 9;\r\n  const paginationItems = paginationHandler(\r\n    totalPages,\r\n    currentPage,\r\n    pageToShow\r\n  );\r\n  // ** Handles pagination\r\n  const handlePageChange = (val) => {\r\n    if (val === 'next') {\r\n      if (currentPage === totalPages) return;\r\n      setCurrentPage(currentPage + 1);\r\n    } else if (val === 'prev') {\r\n      if (currentPage === 1) return;\r\n      setCurrentPage(currentPage - 1);\r\n    } else {\r\n      if (currentPage === val) return;\r\n      setCurrentPage(val);\r\n    }\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  // ** Render pages\r\n  const renderPageItems = () => {\r\n    return paginationItems.numbers.map((number, index) => {\r\n      return (\r\n        <PaginationItem\r\n          key={number}\r\n          active={currentPage === number}\r\n          onClick={() => handlePageChange(number)}\r\n        >\r\n          <PaginationLink href='/' onClick={(e) => e.preventDefault()}>\r\n            {number}\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Pagination className='d-flex justify-content-center'>\r\n      {/* Prev Buttons */}\r\n      <PaginationItem\r\n        disabled={currentPage === 1}\r\n        className='prev-item'\r\n        onClick={() => handlePageChange('prev')}\r\n      >\r\n        <PaginationLink\r\n          href='/'\r\n          onClick={(e) => e.preventDefault()}\r\n        ></PaginationLink>\r\n      </PaginationItem>\r\n      {/* Pagination Truncate Start */}\r\n      {paginationItems.truncateStart && (\r\n        <PaginationItem\r\n          key={1}\r\n          active={currentPage === 1}\r\n          onClick={() => handlePageChange(1)}\r\n        >\r\n          <PaginationLink href='/' onClick={(e) => e.preventDefault()}>\r\n            1\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n      )}\r\n      {paginationItems.truncateStart && paginationItems.numbers[0] > 2 && (\r\n        <div className='pagination-truncate px-2'>...</div>\r\n      )}\r\n      {/* Pages */}\r\n      {renderPageItems()}\r\n      {/*  Pagination Truncate End */}\r\n      {paginationItems.truncateEnd &&\r\n        totalPages -\r\n          paginationItems.numbers[paginationItems.numbers.length - 1] >\r\n          1 && <div className='pagination-truncate px-2'>...</div>}\r\n      {paginationItems.truncateEnd && (\r\n        <PaginationItem\r\n          key={totalPages}\r\n          active={currentPage === totalPages}\r\n          onClick={() => handlePageChange(totalPages)}\r\n        >\r\n          <PaginationLink href='/' onClick={(e) => e.preventDefault()}>\r\n            {totalPages}\r\n          </PaginationLink>\r\n        </PaginationItem>\r\n      )}\r\n      {/* Next Buttons */}\r\n      <PaginationItem\r\n        className='next-item'\r\n        disabled={currentPage === totalPages}\r\n        onClick={() => handlePageChange('next')}\r\n      >\r\n        <PaginationLink\r\n          href='/'\r\n          onClick={(e) => e.preventDefault()}\r\n        ></PaginationLink>\r\n      </PaginationItem>\r\n    </Pagination>\r\n  );\r\n};\r\n\r\nexport default PostsPagination;\r\n","// ** React\r\nimport { Fragment, useState, useEffect } from 'react';\r\n// ** Redux Store and Actions\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  deletePost,\r\n  restorePost,\r\n  getPostsData,\r\n  setPostToManage,\r\n  deleteMultiplePost,\r\n  restoreMultiplePost,\r\n} from '@store/actions/blog';\r\n// ** Third Party Components\r\nimport { toast, Slide } from 'react-toastify';\r\nimport classnames from 'classnames';\r\n// ** Custom Components\r\nimport Breadcrumbs from '@components/breadcrumbs';\r\nimport BlogHeader from './components/blog/BlogHeader';\r\nimport BlogPostList from './components/blog/BlogPostList';\r\nimport ToastContent from './components/users/ToastContent';\r\nimport FilterSidebar from './components/blog/BlogFilterSidebar';\r\nimport BlogModal from './components/blog/blogEdit/BlogModal';\r\nimport BlogPagination from './components/blog/BlogPagination';\r\n// ** Styling Components\r\nimport { Card, CardTitle, CustomInput, Spinner } from 'reactstrap';\r\nimport '@styles/base/pages/app-ecommerce.scss';\r\n\r\nconst Blog = () => {\r\n  // ** Vars\r\n  const dispatch = useDispatch();\r\n  const { state } = useLocation();\r\n  const store = useSelector((state) => state.blog);\r\n  const {\r\n    posts,\r\n    params,\r\n    totalPosts,\r\n    totalPages,\r\n    postToManage,\r\n    postCategories,\r\n  } = store;\r\n  // ** State\r\n  const [searchTerm, setSearchTerm] = useState(params.q || ''),\r\n    [currentPage, setCurrentPage] = useState(params.page || 1),\r\n    [perPage, setPerPage] = useState(params.perPage || 6),\r\n    [sortByValue, setSortByValue] = useState(params.sortBy || 'newest'),\r\n    [categories, setCategories] = useState(params.categories || []),\r\n    [status, setStatus] = useState(params.status || ''),\r\n    [showTrash, setShowTrash] = useState(params.trash || false),\r\n    [selectedPosts, setSelectedPosts] = useState([]),\r\n    [sidebarOpen, setSidebarOpen] = useState(false),\r\n    [showPostModal, setShowPostModal] = useState(!!postToManage),\r\n    [actionType, setActionType] = useState(state?.actionType || null),\r\n    [processing, setProcessing] = useState(false),\r\n    [remountKey, setRemountKey] = useState(0),\r\n    [loadingData, setLoadingData] = useState(false);\r\n\r\n  // ** Get All Posts\r\n  useEffect(async () => {\r\n    setLoadingData(true);\r\n    await dispatch(\r\n      getPostsData({\r\n        q: searchTerm,\r\n        page: currentPage,\r\n        perPage,\r\n        sortBy: sortByValue,\r\n        categories,\r\n        status,\r\n        trash: showTrash,\r\n      })\r\n    );\r\n    setLoadingData(false);\r\n  }, [\r\n    searchTerm,\r\n    currentPage,\r\n    perPage,\r\n    sortByValue,\r\n    categories,\r\n    status,\r\n    showTrash,\r\n  ]);\r\n  // ** All Post selection handler\r\n  const postSelectionHandler = (checked, post) => {\r\n    if (checked) {\r\n      setSelectedPosts((prevState) => {\r\n        const updatedSelectedPosts = [...prevState];\r\n        updatedSelectedPosts.push(post);\r\n        return updatedSelectedPosts;\r\n      });\r\n    } else {\r\n      setSelectedPosts((prevState) => {\r\n        const updatedSelectedPosts = prevState.filter((p) => p.id !== post.id);\r\n        return updatedSelectedPosts;\r\n      });\r\n    }\r\n  };\r\n  // ** All Post selection handler\r\n  const selectAllPostsHandler = (e) => {\r\n    const checked = e.currentTarget.checked;\r\n    if (checked) {\r\n      setSelectedPosts(store.posts);\r\n    } else {\r\n      setSelectedPosts([]);\r\n    }\r\n  };\r\n  // ** Trashed Post\r\n  const getTrashedPosts = () => {\r\n    const trash = !showTrash;\r\n    const sortBy = trash ? 'trash_desc' : 'newest';\r\n    setCurrentPage(1);\r\n    setShowTrash(trash);\r\n    setSortByValue(sortBy);\r\n    setSelectedPosts([]);\r\n    setShowTrash(!showTrash);\r\n  };\r\n  // ** Show Post(s) to delete in deletion Modal\r\n  const showPostModalData = () => {\r\n    if (postToManage) {\r\n      return (\r\n        <ul>\r\n          <li>{postToManage.title}</li>\r\n        </ul>\r\n      );\r\n    } else if (selectedPosts.length) {\r\n      return (\r\n        <ul style={{ maxHeight: '300px', overflow: 'auto' }}>\r\n          {selectedPosts.map((p, i) => (\r\n            <li key={i}>{p.title}</li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n  };\r\n  // ** Post(s) deletion Handler\r\n  const postdeleteRestoreHandler = async () => {\r\n    setProcessing(true);\r\n    let toastValue;\r\n    const action = {\r\n      single: deletePost,\r\n      mutiple: deleteMultiplePost,\r\n      text: 'Suppression',\r\n    };\r\n    // eslint-disable-next-line\r\n    if (actionType == 'RESTORE') {\r\n      action.single = restorePost;\r\n      action.mutiple = restoreMultiplePost;\r\n      action.text = 'restoration';\r\n    }\r\n    if (postToManage) {\r\n      const successDeletion = await dispatch(\r\n        action.single(postToManage, showTrash)\r\n      ).then((res) => res);\r\n      dispatch(setPostToManage(null));\r\n      toastValue = successDeletion\r\n        ? {\r\n            type: 'success',\r\n            text: `${action.text} reussie de : ${postToManage.title}`,\r\n          }\r\n        : {\r\n            type: 'error',\r\n            text: `Echec de la ${action.text} de : ${postToManage.title}`,\r\n          };\r\n    } else if (selectedPosts.length) {\r\n      // If there is many Posts to delete\r\n      const successDeletion = await dispatch(\r\n        action.mutiple(selectedPosts, showTrash)\r\n      ).then((res) => res);\r\n      // Check if all deletion are successfull\r\n      toastValue =\r\n        successDeletion === selectedPosts.length\r\n          ? {\r\n              type: 'success',\r\n              text: `${action.text} reussie de ${selectedPosts.length} article(s)`,\r\n            }\r\n          : {\r\n              type: 'error',\r\n              text: `Echec de la ${action.text} de ${\r\n                selectedPosts.length - successDeletion\r\n              } article(s)`,\r\n            };\r\n    }\r\n    setProcessing(false);\r\n    setShowPostModal(!showPostModal);\r\n    dispatch(setPostToManage(null));\r\n    if (toastValue.type === 'success' && !postToManage) {\r\n      setSelectedPosts([]);\r\n    }\r\n    toast[toastValue.type](ToastContent(toastValue, showPostModalData), {\r\n      transition: Slide,\r\n      autoClose: 5000,\r\n      pauseOnHover: true,\r\n      // hideProgressBar: true,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Breadcrumbs\r\n        breadCrumbTitle='Liste des Articles'\r\n        breadCrumbParent='Blog'\r\n        breadCrumbActive='Articles'\r\n      />\r\n      <div id='blog' className=' container'>\r\n        <div className='content-detached content-left'>\r\n          <div className='content-body'>\r\n            {/* Header */}\r\n            <BlogHeader\r\n              showTrash={showTrash}\r\n              setPerPage={setPerPage}\r\n              searchTerm={searchTerm}\r\n              totalPosts={totalPosts}\r\n              remountKey={remountKey}\r\n              selectedPosts={selectedPosts}\r\n              setActionType={setActionType}\r\n              setSearchTerm={setSearchTerm}\r\n              setCurrentPage={setCurrentPage}\r\n              setSidebarOpen={setSidebarOpen}\r\n              getTrashedPosts={getTrashedPosts}\r\n              setShowPostModal={setShowPostModal}\r\n            />\r\n            {/* Loarder */}\r\n            {loadingData && (\r\n              <div className=' p-3 d-flex justify-content-center '>\r\n                <Spinner id='datable-loader' />\r\n              </div>\r\n            )}\r\n            <div className={classnames({ 'd-none': loadingData })}>\r\n              {/* Select All Product Toggler */}\r\n              <div className='mb-2'>\r\n                <CustomInput\r\n                  type='checkbox'\r\n                  id='toogle-selection'\r\n                  label='Sélectionner tous les article de la page '\r\n                  checked={\r\n                    selectedPosts.length === params.perPage ||\r\n                    selectedPosts.length === posts.length\r\n                  }\r\n                  onChange={selectAllPostsHandler}\r\n                >\r\n                  <span className='ml-1'>\r\n                    {`(${selectedPosts.length}/${store.posts.length})`}\r\n                  </span>\r\n                </CustomInput>\r\n              </div>\r\n              {/* Post List */}\r\n              <div className='blog-list-wrapper'>\r\n                {totalPosts ? (\r\n                  <BlogPostList\r\n                    allPosts={posts}\r\n                    dispatch={dispatch}\r\n                    showTrash={showTrash}\r\n                    totalPosts={totalPosts}\r\n                    selectedPosts={selectedPosts}\r\n                    setActionType={setActionType}\r\n                    postCategories={postCategories}\r\n                    setPostToManage={setPostToManage}\r\n                    setShowPostModal={setShowPostModal}\r\n                    postSelectionHandler={postSelectionHandler}\r\n                  />\r\n                ) : (\r\n                  <Card style={{ height: '190px' }}>\r\n                    <CardTitle className='text-center mt-5 pt-2' tag='h4'>\r\n                      Aucun Article !\r\n                    </CardTitle>\r\n                  </Card>\r\n                )}\r\n                {/* Pagination */}\r\n                <BlogPagination\r\n                  allPosts={posts}\r\n                  totalPages={totalPages}\r\n                  currentPage={currentPage}\r\n                  setCurrentPage={setCurrentPage}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Filter Sidebar */}\r\n        <FilterSidebar\r\n          status={status}\r\n          showTrash={showTrash}\r\n          setStatus={setStatus}\r\n          remountKey={remountKey}\r\n          categories={categories}\r\n          sidebarOpen={sidebarOpen}\r\n          sortByValue={sortByValue}\r\n          setCategories={setCategories}\r\n          setRemountKey={setRemountKey}\r\n          setSortByValue={setSortByValue}\r\n          setCurrentPage={setCurrentPage}\r\n          postCategories={postCategories}\r\n        />\r\n        {showPostModal && (\r\n          <BlogModal\r\n            dispatch={dispatch}\r\n            actionType={actionType}\r\n            processing={processing}\r\n            postToManage={postToManage}\r\n            selectedPosts={selectedPosts}\r\n            showPostModal={showPostModal}\r\n            setPostToManage={setPostToManage}\r\n            setShowPostModal={setShowPostModal}\r\n            showPostModalData={showPostModalData}\r\n            postdeleteRestoreHandler={postdeleteRestoreHandler}\r\n          />\r\n        )}\r\n        {/* Sidebar Overlay */}\r\n        <div\r\n          className={classnames('body-content-overlay', {\r\n            show: sidebarOpen,\r\n          })}\r\n          onClick={() => setSidebarOpen(false)}\r\n        ></div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Blog;\r\n","import React from 'react';\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar';\r\n\r\nconst RenderAvatar = ({ avatar, name, size = {} }) => {\r\n  const { w = '33', h = '33' } = size;\r\n  const randomIndex = Math.floor(Math.random() * 6);\r\n  const avatarColors = [\r\n    'light-success',\r\n    'light-danger',\r\n    'light-warning',\r\n    'light-info',\r\n    'light-primary',\r\n    'light-secondary',\r\n  ];\r\n  const randomColor = avatarColors[randomIndex];\r\n\r\n  if (avatar && avatar.length) {\r\n    return <Avatar className='mr-1' img={avatar} imgWidth={w} imgHeight={h} />;\r\n  } else {\r\n    return (\r\n      <Avatar\r\n        color={randomColor || 'primary'}\r\n        className='mr-1'\r\n        content={name || '_'}\r\n        initials\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default RenderAvatar;\r\n","/* eslint-disable */\r\nfunction paginationHandler(totalPage, currentPage, pageToShow = 7) {\r\n  // Numbers of Pagination to show (ood number)}\r\n  const halfOfPageToShow = Math.trunc(pageToShow / 2);\r\n  if (!totalPage || !currentPage) return null;\r\n\r\n  const pagination = {\r\n    numbers: [],\r\n    truncateEnd: false,\r\n    truncateStart: false,\r\n  };\r\n\r\n  // ********\r\n  if (currentPage - halfOfPageToShow <= 0 && pageToShow <= totalPage) {\r\n    if (pageToShow < totalPage) pagination.truncateEnd = true;\r\n    for (let page = 1; page <= pageToShow; page++) {\r\n      pagination.numbers.push(page);\r\n    }\r\n  }\r\n  // ********\r\n  else if (\r\n    currentPage - halfOfPageToShow > 0 &&\r\n    currentPage + halfOfPageToShow <= totalPage\r\n  ) {\r\n    if (currentPage - halfOfPageToShow > 1) {\r\n      pagination.truncateStart = true;\r\n    }\r\n    if (currentPage + halfOfPageToShow < totalPage) {\r\n      pagination.truncateEnd = true;\r\n    }\r\n    for (\r\n      let page = currentPage - halfOfPageToShow;\r\n      page <= currentPage + halfOfPageToShow;\r\n      page++\r\n    ) {\r\n      pagination.numbers.push(page);\r\n    }\r\n  }\r\n  // ********\r\n  else if (\r\n    currentPage + halfOfPageToShow > totalPage &&\r\n    totalPage >= pageToShow\r\n  ) {\r\n    if (totalPage - pageToShow > 1) {\r\n      pagination.truncateStart = true;\r\n    }\r\n    for (let page = totalPage - pageToShow + 1; page <= totalPage; page++) {\r\n      pagination.numbers.push(page);\r\n    }\r\n  } else {\r\n    for (let page = 1; page <= totalPage; page++) {\r\n      pagination.numbers.push(page);\r\n    }\r\n  }\r\n\r\n  return pagination;\r\n}\r\n\r\nmodule.exports = paginationHandler;\r\n","// ** React\r\nimport { Fragment } from 'react';\r\n// ** Third Party Components\r\nimport Avatar from '@components/avatar';\r\n// ** Styling Components\r\nimport { Check, AlertCircle } from 'react-feather';\r\n\r\n// ** Toast Message Handler\r\nconst ToastContent = (toast, showValueToDelete) => {\r\n  let color;\r\n  switch (toast.type) {\r\n    case 'success':\r\n      color = 'success';\r\n      break;\r\n    case 'error':\r\n      color = 'danger';\r\n      break;\r\n    case 'danger':\r\n      color = 'danger';\r\n      break;\r\n    default:\r\n      color = 'warning';\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='toastify-header'>\r\n        <div className='title-wrapper'>\r\n          <Avatar\r\n            size='sm'\r\n            color={color}\r\n            icon={\r\n              toast.type === 'success' ? (\r\n                <Check size={12} />\r\n              ) : (\r\n                <AlertCircle size={12} />\r\n              )\r\n            }\r\n          />\r\n          <div style={{ maxHeight: '350px', overflow: 'auto' }}>\r\n            <h6 className='toast-title font-weight-bold text-center'>\r\n              {toast.text}\r\n            </h6>\r\n            {showValueToDelete && toast.value && showValueToDelete(toast.value)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ToastContent;\r\n","// ** React Imports\r\nimport { Link } from 'react-router-dom';\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types';\r\nimport {\r\n  Grid,\r\n  CheckSquare,\r\n  MessageSquare,\r\n  Mail,\r\n  Calendar,\r\n} from 'react-feather';\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from 'reactstrap';\r\n\r\nconst BreadCrumbs = (props) => {\r\n  // ** Props\r\n  const {\r\n    breadCrumbTitle,\r\n    breadCrumbParent,\r\n    breadCrumbParent2,\r\n    breadCrumbParent3,\r\n    breadCrumbActive,\r\n  } = props;\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? (\r\n              <h2 className='content-header-title float-left mb-0'>\r\n                {breadCrumbTitle}\r\n              </h2>\r\n            ) : (\r\n              ''\r\n            )}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Acceuil</Link>\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent && (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent}\r\n                  </BreadcrumbItem>\r\n                )}\r\n                {breadCrumbParent2 && (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                )}\r\n                {breadCrumbParent3 && (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\r\n        <div className='form-group breadcrum-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle\r\n              color='primary'\r\n              size='sm'\r\n              className='btn-icon btn-round dropdown-toggle'\r\n            >\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' right>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <CheckSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='mr-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='mr-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\nexport default BreadCrumbs;\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired,\r\n};\r\n"],"sourceRoot":""}