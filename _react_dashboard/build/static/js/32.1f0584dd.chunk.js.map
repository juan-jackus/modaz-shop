{"version":3,"sources":["views/components/authPages/AuthValidationSchema.js","views/components/authPages/ResetPassword.jsx","../node_modules/webpack/buildin/module.js"],"names":["resetPasswordSchema","Yup","shape","password","trim","matches","min","passwordConfirmation","oneOf","AuthPages","history","useHistory","useSkin","skin","dispatch","useDispatch","loginErrors","useSelector","state","errors","login","useState","resetEmail","setResetEmail","isSubmitting","setIsSubmitting","isLoading","setIsLoading","tokenError","setTokenError","useForm","mode","defaultValues","resolver","yupResolver","authSchema","register","handleSubmit","setError","token","useParams","illustration","imgSource","require","default","useEffect","verifyResetPasswordToken","then","res","result","invalidToken","replace","expiredToken","email","forEach","error","param","type","message","msg","data","resetPwdHandler","resetPassword","toastValue","text","toast","ToastContent","transition","Slide","hideProgressBar","autoClose","pauseOnHover","className","Row","to","onClick","e","preventDefault","src","dashboardLogo","alt","style","maxHeight","Col","lg","sm","md","CardTitle","tag","Spinner","size","color","Alert","Button","Ripple","block","Link","CardText","Form","onSubmit","FormGroup","Label","for","id","autoFocus","name","innerRef","required","classnames","disabled","module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i"],"mappings":"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","file":"static/js/32.1f0584dd.chunk.js","sourcesContent":["import * as Yup from 'yup';\r\n\r\n// Regex for Password Schema\r\nconst pwdUppercaseRegex = /(?=.*[A-Z])/;\r\nconst pwdLowercaseRegex = /(?=.*[a-z])/;\r\nconst pwdNumberRegex = /(?=.*[0-9])/;\r\n\r\nconst resetPasswordSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .trim()\r\n    .matches(pwdNumberRegex, 'Doit contenir un chiffre')\r\n    .matches(pwdUppercaseRegex, 'Doit contenir une lettre majuscule')\r\n    .matches(pwdLowercaseRegex, 'Doit contenir une lettre minuscule')\r\n    .min(8, 'Mot de passe trop court (minimum 8)'),\r\n  passwordConfirmation: Yup.string()\r\n    .trim()\r\n    .oneOf([Yup.ref('password')], 'Les mots de passe ne correspondent pas'),\r\n});\r\n\r\nexport default resetPasswordSchema;\r\n","// ** React\r\nimport { useState, useEffect } from 'react';\r\nimport { useHistory, useParams, Link } from 'react-router-dom';\r\n// ** Redux Store and Actions\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { resetPassword, verifyResetPasswordToken } from '@store/actions/auth';\r\n// ** Form and Validation\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport authSchema from './AuthValidationSchema';\r\n// ** Third Party Components\r\nimport { toast, Slide } from 'react-toastify';\r\nimport classnames from 'classnames';\r\n// ** Utils\r\nimport { useSkin } from '@hooks/useSkin';\r\n// ** Custom Components\r\nimport ToastContent from '../users/ToastContent';\r\nimport InputPassword from '@components/input-password-toggle';\r\n// ** Styling Components\r\nimport dashboardLogo from '@src/assets/images/logo/dashboard-logo.png';\r\nimport { ChevronLeft } from 'react-feather';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Form,\r\n  Label,\r\n  Alert,\r\n  Button,\r\n  Spinner,\r\n  CardText,\r\n  FormGroup,\r\n  CardTitle,\r\n} from 'reactstrap';\r\nimport '@styles/base/pages/page-auth.scss';\r\n\r\nconst AuthPages = () => {\r\n  const history = useHistory();\r\n  const [skin] = useSkin();\r\n  const dispatch = useDispatch();\r\n  const loginErrors = useSelector((state) => state.errors.login);\r\n  const [resetEmail, setResetEmail] = useState('');\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [tokenError, setTokenError] = useState(false);\r\n  const { register, errors, handleSubmit, setError } = useForm({\r\n    mode: 'onBlur',\r\n    defaultValues: {},\r\n    resolver: yupResolver(authSchema),\r\n  });\r\n  const { token } = useParams();\r\n  const illustration =\r\n    skin === 'dark' ? 'reset-password-v2-dark.svg' : 'reset-password-v2.svg';\r\n  const imgSource = require(`@src/assets/images/pages/${illustration}`).default;\r\n\r\n  useEffect(async () => {\r\n    const result = await dispatch(verifyResetPasswordToken(token)).then(\r\n      (res) => res\r\n    );\r\n    setIsLoading(false);\r\n    if (result.invalidToken) {\r\n      history.replace('/');\r\n    } else if (result.expiredToken) {\r\n      setTokenError(result.expiredToken);\r\n    } else {\r\n      setResetEmail(result.email);\r\n    }\r\n  }, []);\r\n\r\n  // ** Set server Errors response\r\n  useEffect(() => {\r\n    if (loginErrors) {\r\n      loginErrors.forEach((error) => {\r\n        setError(error.param, {\r\n          type: 'manual',\r\n          message: error.msg,\r\n        });\r\n      });\r\n      dispatch({\r\n        type: 'CLEAR_ERRORS',\r\n        data: 'login',\r\n      });\r\n    }\r\n  }, [loginErrors]);\r\n\r\n  const resetPwdHandler = async (data) => {\r\n    setIsSubmitting(true);\r\n    data.token = token;\r\n    data.email = resetEmail;\r\n    const result = await dispatch(resetPassword(data)).then((res) => res);\r\n    setIsSubmitting(false);\r\n    if (result?.invalidToken) {\r\n      return history.replace('/');\r\n    } else if (result?.expiredToken) {\r\n      return setTokenError(result.expiredToken);\r\n    }\r\n    if (!result) return;\r\n    const toastValue = {\r\n      type: 'success',\r\n      text: 'Le mot de passe a été réinitialisé avec succès !',\r\n    };\r\n    toast[toastValue.type](ToastContent(toastValue), {\r\n      transition: Slide,\r\n      hideProgressBar: false,\r\n      autoClose: 5000,\r\n      pauseOnHover: true,\r\n    });\r\n    history.replace('/');\r\n  };\r\n\r\n  return (\r\n    <div className='auth-wrapper auth-v2'>\r\n      <Row className='auth-inner m-0'>\r\n        <Link className='brand-logo' to='/' onClick={(e) => e.preventDefault()}>\r\n          <img\r\n            src={dashboardLogo}\r\n            className='img-fluid'\r\n            alt='logo'\r\n            style={{ maxHeight: '50px' }}\r\n          />\r\n        </Link>\r\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={imgSource} alt='Login V2' />\r\n          </div>\r\n        </Col>\r\n        <Col\r\n          className='d-flex align-items-center auth-bg px-2 p-lg-5'\r\n          lg='4'\r\n          sm='12'\r\n        >\r\n          {isLoading ? (\r\n            <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n              <CardTitle tag='h2' className='font-weight-bold mb-1'>\r\n                Demande de réinitialisation du mot de passe...\r\n              </CardTitle>\r\n              <Spinner className='mx-auto' size='lg' color='primary' />\r\n            </Col>\r\n          ) : tokenError ? (\r\n            <div>\r\n              <h3>Demande de réinitialisation du mot de passe 🔒</h3>\r\n              <Alert color='danger mt-2'>\r\n                <div className='alert-body'>{tokenError}</div>\r\n              </Alert>\r\n              <Button.Ripple color='primary' block tag={Link} to='/'>\r\n                <ChevronLeft className='mr-25' size={14} />\r\n                <span className='align-middle'>\r\n                  Retour à la page de connexion\r\n                </span>\r\n              </Button.Ripple>\r\n            </div>\r\n          ) : (\r\n            <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n              <CardTitle tag='h2' className='font-weight-bold mb-1'>\r\n                Réinitialiser le mot de passe 🔒\r\n              </CardTitle>\r\n              <CardText className='mb-2'>\r\n                Votre nouveau mot de passe doit être différent de l'ancien\r\n              </CardText>\r\n              <Form\r\n                className='auth-reset-password-form mt-2'\r\n                onSubmit={handleSubmit(resetPwdHandler)}\r\n              >\r\n                <FormGroup>\r\n                  <Label className='form-label' for='reset-pwd'>\r\n                    Nouveau mot de passe\r\n                  </Label>\r\n                  <InputPassword\r\n                    id='reset-pwd'\r\n                    autoFocus\r\n                    name='password'\r\n                    innerRef={register}\r\n                    required\r\n                    className={classnames('input-group-merge', {\r\n                      'is-invalid': errors['password'],\r\n                    })}\r\n                  />\r\n                  <div className='invalid-feedback'>\r\n                    {errors['password']?.message}\r\n                  </div>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label className='form-label' for='confirm-reset-pwd'>\r\n                    Confirmer le mot de passe\r\n                  </Label>\r\n                  <InputPassword\r\n                    id='confirm-reset-pwd'\r\n                    name='passwordConfirmation'\r\n                    innerRef={register}\r\n                    required\r\n                    className={classnames('input-group-merge', {\r\n                      'is-invalid': errors['passwordConfirmation'],\r\n                    })}\r\n                  />\r\n                  <div className='invalid-feedback'>\r\n                    {errors['passwordConfirmation']?.message}\r\n                  </div>\r\n                </FormGroup>\r\n                <Button.Ripple\r\n                  color='primary'\r\n                  disabled={isSubmitting}\r\n                  type='submit '\r\n                  block\r\n                >\r\n                  {isSubmitting ? (\r\n                    <>\r\n                      <Spinner color='white' />\r\n                      <span className='ml-50'>Soumission...</span>\r\n                    </>\r\n                  ) : (\r\n                    'Valider'\r\n                  )}\r\n                </Button.Ripple>\r\n              </Form>\r\n              <p className='text-center mt-2'>\r\n                <Link to='/'>\r\n                  <ChevronLeft className='mr-25' size={14} />\r\n                  <span className='align-middle'>\r\n                    Retour à la page de connexion\r\n                  </span>\r\n                </Link>\r\n              </p>\r\n            </Col>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthPages;\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}